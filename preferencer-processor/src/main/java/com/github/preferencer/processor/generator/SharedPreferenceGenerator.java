package com.github.preferencer.processor.generator;

import com.github.preferencer.processor.CodeGeneration;
import com.github.preferencer.processor.exception.ProcessingException;
import com.github.preferencer.processor.model.Preference;
import com.github.preferencer.processor.model.SharedPreferenceType;
import com.github.preferencer.processor.utils.ClassNameUtil;
import com.github.preferencer.processor.utils.NamingUtils;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Modifier;


/**
 * @author raunysouza
 */
public class SharedPreferenceGenerator {

    private static final String VAR_CONTEXT = "context";

    public void generate(SharedPreferenceType type, ProcessingEnvironment env) throws ProcessingException {
        ClassName sourceTypeName = (ClassName) ParameterizedTypeName.get(type.getSourceElement().asType());

        String generatedClassName = generateTargetClassName(type.getName());
        ClassName thisClassName = ClassName.get("", generatedClassName);
        TypeSpec.Builder builder = TypeSpec.classBuilder(generatedClassName)
                .addModifiers(Modifier.PUBLIC)
                .addMethod(generateConstructor(type))
                .addMethods(generatePreferenceMethods(type.getPreferences()))
                .addMethod(generateEditMethod(generatedClassName))
                .addJavadoc("Generated class based on {@link $T} class.\n" +
                        "Any class generated by Preferencer processor doesn't inherit or implement your based class", sourceTypeName)
                .superclass(ClassNameUtil.baseSharedPreference)
                .addType(generateEditorClass(generatedClassName, type.getPreferences()));

        createSingletonInstance(builder, thisClassName);

        CodeGeneration.addGeneratedAnnotation(env, builder);

        try {
            CodeGeneration.writeType(env, sourceTypeName.packageName(), builder.build());
        } catch (IOException e) {
            throw new ProcessingException("Error trying to write file", type.getSourceElement());
        }
    }

    private MethodSpec generateConstructor(SharedPreferenceType type) {
        MethodSpec.Builder builder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(ParameterSpec.builder(ClassNameUtil.context, VAR_CONTEXT, Modifier.FINAL).build());

        if (type.isUseDefault()) {
            builder.addStatement("super($T.getDefaultSharedPreferences($L))",
                    ClassNameUtil.preferenceManager, VAR_CONTEXT);
        } else {
            builder.addStatement("super($L.getSharedPreferences($S, 0))",
                    VAR_CONTEXT, NamingUtils.getKeyName(type.getName()));
        }

        return builder.build();
    }

    private List<MethodSpec> generatePreferenceMethods(List<Preference> preferences) {
        List<MethodSpec> specs = new ArrayList<>(preferences.size());
        preferences.forEach(preference -> {
            MethodSpec.Builder builder = MethodSpec.methodBuilder(preference.getName())
                    .addModifiers(Modifier.PUBLIC)
                    .returns(preference.getType());
            preference.createStatement(builder);
            specs.add(builder.build());
        });
        return specs;
    }

    private void createSingletonInstance(TypeSpec.Builder builder, ClassName thisClass) {
        String instanceFieldName = "INSTANCE";
        builder.addField(FieldSpec.builder(thisClass, instanceFieldName, Modifier.PUBLIC, Modifier.STATIC).build());

        MethodSpec method = MethodSpec.methodBuilder("getInstance")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(thisClass)
                .addParameter(ParameterSpec.builder(ClassNameUtil.context, VAR_CONTEXT).build())
                .beginControlFlow("if ($L == null)", instanceFieldName)
                .beginControlFlow("synchronized ($T.class)", thisClass)
                .addStatement("$L = new $T($L)", instanceFieldName, thisClass, VAR_CONTEXT)
                .endControlFlow()
                .endControlFlow()
                .addStatement("return $L", instanceFieldName)
                .build();

        builder.addMethod(method);
    }

    private MethodSpec generateEditMethod(String baseName) {
        ClassName editor = ClassName.get("", baseName.concat("Editor"));
        return MethodSpec.methodBuilder("edit")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .returns(editor)
                .addStatement("return new $T(getSharedPreferences().edit())", editor)
                .build();

    }

    private TypeSpec generateEditorClass(String baseName, List<Preference> preferences) {
        String editorName = baseName.concat("Editor");
        TypeSpec.Builder builder = TypeSpec.classBuilder(editorName)
                .addModifiers(Modifier.FINAL, Modifier.PUBLIC)
                .superclass(ClassNameUtil.baseSharedPreferenceEditor)
                .addMethod(MethodSpec.constructorBuilder()
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(ParameterSpec.builder(ClassNameUtil.sharedPreferencesEditor, "editor")
                                .build())
                        .addStatement("super(editor)")
                        .build());

        preferences.forEach(preference -> {
            ParameterizedTypeName editor = ParameterizedTypeName.get(
                    ClassName.get(
                            ClassNameUtil.baseSharedPreferenceEditor.packageName().concat(".editor"),
                            preference.getType().simpleName().concat("Editor")), ClassName.get("", editorName));
            builder.addMethod(MethodSpec.methodBuilder(preference.getName())
                    .addModifiers(Modifier.PUBLIC)
                    .returns(editor)
                    .addStatement("return new $T(getEditor(), this, $S)", editor, NamingUtils.getKeyName(preference.getName()))
                    .build());
        });

        return builder.build();
    }

    private String generateTargetClassName(String name) {
        if (name.startsWith("I")) {
            return name.substring(1);
        }

        return name + "Preference";
    }
}
